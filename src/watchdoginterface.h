// Copyright (c) 2020 The Bitcoin Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#ifndef BITCOIN_WATCHDOGINTERFACE_H
#define BITCOIN_WATCHDOGINTERFACE_H

#include <validationinterface.h>

class CWatchdogInterface;

/** Register a wallet to receive updates from core */
void RegisterWatchdogInterface(CWatchdogInterface* callback);

/**
 * Implement this to subscribe to events generated in watchdog
 *
 * Each CWatchdogInterface() subscriber will receive event callbacks
 * in the order in which the events were generated by watchdog.
 *
*/
class CWatchdogInterface {
protected:
    /**
     * Protected destructor so that instances can only be deleted by derived classes.
     * If that restriction is no longer desired, this should be made public and virtual.
     */
    ~CWatchdogInterface() = default;
    /**
     * Notifies listeners a block header have been detected.
     *
     * Called on a background thread.
     */
    virtual void BlockHeaderAnomalie() {}
    friend class CWatchSignals;
};

//TODO: we heavily draught from validationinterface.h but ideally we should refactor common parts and move //it in its own util/

struct WatchSignalsInstance;
class CWatchSignals {
private:
    std::unique_ptr<WatchSignalsInstance> m_internals;

    friend void ::RegisterSharedWatchdogInterface(std::shared_ptr<CWatchdogInterface>);

public:
    /** Register a CScheduler to give callbacks which should run in the background (may only be called once) */
    void RegisterBackgroundSignalScheduler(CScheduler& scheduler);
    /** Unregister a CScheduler to give callbacks which should run in the background - these callbacks will now be dropped! */
    void UnregisterBackgroundSignalScheduler();
    /** Call any remaining callbacks on the calling thread */
    void FlushBackgroundCallbacks();

    size_t CallbacksPending();

    void BlockHeaderAnomalie();
};

CWatchSignals& GetWatchSignals();

#endif // BITCOIN_WATCHDOGINTERFACE_H
